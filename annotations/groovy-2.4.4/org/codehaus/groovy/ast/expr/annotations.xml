<root>
    <item
        name='org.codehaus.groovy.ast.expr.SpreadMapExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PrefixExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.NotExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArgumentListExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.Expression java.util.List&lt;T&gt; transformExpressions(java.util.List&lt;? extends org.codehaus.groovy.ast.expr.Expression&gt;, org.codehaus.groovy.ast.expr.ExpressionTransformer, java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ElvisOperatorExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PostfixExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArrayExpression ArrayExpression(org.codehaus.groovy.ast.ClassNode, java.util.List&lt;org.codehaus.groovy.ast.expr.Expression&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PropertyExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.DeclarationExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.SpreadExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.UnaryMinusExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression EMPTY_STRING'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PrefixExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArgumentListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.CastExpression org.codehaus.groovy.ast.expr.CastExpression asExpression(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.NamedArgumentListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArgumentListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.EmptyExpression INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArrayExpression ArrayExpression(org.codehaus.groovy.ast.ClassNode, java.util.List&lt;org.codehaus.groovy.ast.expr.Expression&gt;, java.util.List&lt;org.codehaus.groovy.ast.expr.Expression&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.DeclarationExpression DeclarationExpression(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.syntax.Token, org.codehaus.groovy.ast.expr.Expression) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PrefixExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ArgumentListExpression EMPTY_ARRAY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.FieldExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression NULL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.DeclarationExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression VOID'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.VariableExpression VariableExpression(org.codehaus.groovy.ast.Variable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PostfixExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression EMPTY_EXPRESSION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodCall org.codehaus.groovy.ast.expr.Expression getArguments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ExpressionTransformer org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.AnnotationConstantExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.NotExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstructorCallExpression java.lang.String getMethodAsString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.DeclarationExpression void setLeftExpression(org.codehaus.groovy.ast.expr.Expression) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.UnaryMinusExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodPointerExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClosureListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.SpreadExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.VariableExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BitwiseNegationExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.StaticMethodCallExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.codehaus.groovy.ast.expr.MethodCallExpression NO_ARGUMENTS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.NamedArgumentListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.GStringExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodPointerExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression FALSE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.Expression java.util.List&lt;T&gt; transformExpressions(java.util.List&lt;? extends org.codehaus.groovy.ast.expr.Expression&gt;, org.codehaus.groovy.ast.expr.ExpressionTransformer, java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PostfixExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.SpreadMapExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TernaryExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BitwiseNegationExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression PRIM_TRUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MapEntryExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.VariableExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArrayExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstantExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.GStringExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.UnaryPlusExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TernaryExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.GStringExpression org.codehaus.groovy.ast.expr.Expression asConstantString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PropertyExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ElvisOperatorExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstructorCallExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MapExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BooleanExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.GStringExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.UnaryPlusExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArrayExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClassExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.AttributeExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClosureExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstantExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TupleExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.CastExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClassExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClosureExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MapEntryExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClosureListExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.Expression java.util.List&lt;org.codehaus.groovy.ast.expr.Expression&gt; transformExpressions(java.util.List&lt;? extends org.codehaus.groovy.ast.expr.Expression&gt;, org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstructorCallExpression org.codehaus.groovy.ast.expr.Expression getArguments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstructorCallExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodCallExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodPointerExpression java.lang.Class getTypeClass()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression PRIM_FALSE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.EmptyExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArgumentListExpression ArgumentListExpression(org.codehaus.groovy.ast.Parameter[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.RangeExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TupleExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BooleanExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.Expression java.util.List&lt;org.codehaus.groovy.ast.expr.Expression&gt; transformExpressions(java.util.List&lt;? extends org.codehaus.groovy.ast.expr.Expression&gt;, org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression org.codehaus.groovy.ast.expr.BinaryExpression newAssignmentExpression(org.codehaus.groovy.ast.Variable, org.codehaus.groovy.ast.expr.Expression)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClassExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.CastExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.GStringExpression void addString(org.codehaus.groovy.ast.expr.ConstantExpression) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.VariableExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.AttributeExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MapExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.FieldExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.RangeExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.EmptyExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.AnnotationConstantExpression AnnotationConstantExpression(org.codehaus.groovy.ast.AnnotationNode) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstructorCallExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodPointerExpression org.codehaus.groovy.ast.ClassNode getType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.CastExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BooleanExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.AttributeExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MapExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.EmptyExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.RangeExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.Expression org.codehaus.groovy.ast.ClassNode getType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression org.codehaus.groovy.ast.expr.BinaryExpression newInitializationExpression(java.lang.String, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClosureListExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.DeclarationExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodCallExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.UnaryMinusExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ClosureExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TupleExpression org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.Expression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression org.codehaus.groovy.ast.expr.BinaryExpression newAssignmentExpression(org.codehaus.groovy.ast.Variable, org.codehaus.groovy.ast.expr.Expression) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.FieldExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TernaryExpression org.codehaus.groovy.ast.ClassNode getType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MapEntryExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.PropertyExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression void setLeftExpression(org.codehaus.groovy.ast.expr.Expression) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ConstantExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TernaryExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ArgumentListExpression EMPTY_ARGUMENTS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ArrayExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.NotExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.UnaryPlusExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BinaryExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.StaticMethodCallExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ElvisOperatorExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.codehaus.groovy.ast.expr.ConstantExpression TRUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.SpreadExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.StaticMethodCallExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.BitwiseNegationExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.ListExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodPointerExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.SpreadMapExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.TupleExpression void visit(org.codehaus.groovy.ast.GroovyCodeVisitor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='org.codehaus.groovy.ast.expr.MethodCallExpression org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
