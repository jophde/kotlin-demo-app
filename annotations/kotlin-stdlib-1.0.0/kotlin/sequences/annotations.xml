<root>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T single(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double averageOfInt(kotlin.sequences.Sequence&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Iterable&lt;T&gt; asIterable(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; filterIsInstance(kotlin.sequences.Sequence&lt;?&gt;, java.lang.Class&lt;R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedDescending(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.HashSet&lt;T&gt; toHashSet(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.sorted.1 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 6'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.FilteringSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence kotlin.jvm.functions.Function2 access$getTransformer$p(kotlin.sequences.TransformingIndexedSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.Pair&lt;java.util.List&lt;T&gt;,java.util.List&lt;T&gt;&gt; partition(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence FilteringSequence(kotlin.sequences.Sequence, boolean, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; filterIsInstance(kotlin.sequences.Sequence&lt;?&gt;, java.lang.Class&lt;R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence FlatteningSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;, kotlin.jvm.functions.Function1&lt;? super R,? extends java.util.Iterator&lt;? extends E&gt;&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;V&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropSequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence.iterator.1 java.util.Iterator&lt;T1&gt; getIterator1()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt R fold(kotlin.sequences.Sequence&lt;? extends T&gt;, R, kotlin.jvm.functions.Function2&lt;? super R,? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T last(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T min(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T first(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;kotlin.collections.IndexedValue&lt;T&gt;&gt; withIndex(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;V&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence FlatteningSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;, kotlin.jvm.functions.Function1&lt;? super R,? extends java.util.Iterator&lt;? extends E&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;T&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FlatteningSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int count(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int indexOf(kotlin.sequences.Sequence&lt;? extends T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.minus.4 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;kotlin.collections.IndexedValue&lt;T&gt;&gt; withIndex(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence FilteringSequence(kotlin.sequences.Sequence, boolean, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence MergingSequence(kotlin.sequences.Sequence&lt;? extends T1&gt;, kotlin.sequences.Sequence&lt;? extends T2&gt;, kotlin.jvm.functions.Function2&lt;? super T1,? super T2,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.FlatteningSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.SortedSet&lt;T&gt; toSortedSet(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Set&lt;T&gt; toSet(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt void forEachIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;T&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.FilteringSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associate(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence kotlin.jvm.functions.Function2 access$getTransformer$p(kotlin.sequences.TransformingIndexedSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double averageOfFloat(kotlin.sequences.Sequence&lt;java.lang.Float&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIsInstanceTo(kotlin.sequences.Sequence&lt;?&gt;, C, java.lang.Class&lt;R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence FilteringSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, boolean, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean any(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence MergingSequence(kotlin.sequences.Sequence&lt;? extends T1&gt;, kotlin.sequences.Sequence&lt;? extends T2&gt;, kotlin.jvm.functions.Function2&lt;? super T1,? super T2,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;V&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean none(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt R fold(kotlin.sequences.Sequence&lt;? extends T&gt;, R, kotlin.jvm.functions.Function2&lt;? super R,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(kotlin.jvm.functions.Function0&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence kotlin.jvm.functions.Function2 access$getTransform$p(kotlin.sequences.MergingSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T single(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double averageOfLong(kotlin.sequences.Sequence&lt;java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;T&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.List&lt;T&gt; toMutableList(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropSequence DropSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associate(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance.1 INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence kotlin.sequences.Sequence access$getSequence1$p(kotlin.sequences.MergingSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt float sumOfFloat(kotlin.sequences.Sequence&lt;java.lang.Float&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; flatten(kotlin.sequences.Sequence&lt;? extends kotlin.sequences.Sequence&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,T&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropWhileSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence java.util.Iterator&lt;R&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.HashSet&lt;T&gt; toHashSet(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double sumByDouble(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Double&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence kotlin.jvm.functions.Function1 access$getIterator$p(kotlin.sequences.FlatteningSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeSequence int access$getCount$p(kotlin.sequences.TakeSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt void forEach(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double sumByDouble(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence FilteringSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, boolean, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIsInstanceTo(kotlin.sequences.Sequence&lt;?&gt;, C, java.lang.Class&lt;R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence MergingSequence(kotlin.sequences.Sequence&lt;? extends T1&gt;, kotlin.sequences.Sequence&lt;? extends T2&gt;, kotlin.jvm.functions.Function2&lt;? super T1,? super T2,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; take(kotlin.sequences.Sequence&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,T&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; map(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Set&lt;T&gt; toMutableSet(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt void forEach(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; map(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIsInstanceTo(kotlin.sequences.Sequence&lt;?&gt;, C, java.lang.Class&lt;R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FilteringSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt S reduce(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super S,? super T,? extends S&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, T[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C toCollection(kotlin.sequences.Sequence&lt;? extends T&gt;, C) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int count(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence TransformingSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sequenceOf(T...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T minBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence kotlin.sequences.Sequence access$getSequence2$p(kotlin.sequences.MergingSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt S reduce(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super S,? super T,? extends S&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(kotlin.jvm.functions.Function0&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C toCollection(kotlin.sequences.Sequence&lt;? extends T&gt;, C) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(T, kotlin.jvm.functions.Function1&lt;? super T,? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int count(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double sumOfDouble(kotlin.sequences.Sequence&lt;java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapIndexedNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence.iterator.1 kotlin.collections.IndexedValue&lt;T&gt; next()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence TakeWhileSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt R foldIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, R, kotlin.jvm.functions.Function3&lt;? super java.lang.Integer,? super R,? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; takeWhile(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.TakeWhileSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T lastOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; requireNoNulls(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int sumOfInt(kotlin.sequences.Sequence&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.List&lt;T&gt; toMutableList(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean none(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; flattenSequenceOfIterable(kotlin.sequences.Sequence&lt;? extends java.lang.Iterable&lt;? extends T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filter(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence TakeWhileSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(kotlin.jvm.functions.Function0&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T maxBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.IndexingSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(kotlin.jvm.functions.Function0&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double averageOfDouble(kotlin.sequences.Sequence&lt;java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TakeWhileSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.IndexingSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T lastOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence TransformingSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filter(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T maxBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt R foldIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, R, kotlin.jvm.functions.Function3&lt;? super java.lang.Integer,? super R,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt void forEachIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(T, kotlin.jvm.functions.Function1&lt;? super T,? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associate(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, T[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence java.util.Iterator&lt;kotlin.collections.IndexedValue&lt;T&gt;&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence FlatteningSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;, kotlin.jvm.functions.Function1&lt;? super R,? extends java.util.Iterator&lt;? extends E&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;kotlin.Pair&lt;T,R&gt;&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; map(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,V&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; distinctBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T max(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedByDescending(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; filterIsInstance(kotlin.sequences.Sequence&lt;?&gt;, java.lang.Class&lt;R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean none(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence kotlin.jvm.functions.Function1 access$getIterator$p(kotlin.sequences.FlatteningSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.Sequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence TransformingIndexedSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T last(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterIsInstanceTo(kotlin.sequences.Sequence&lt;?&gt;, C, java.lang.Class&lt;R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.minus.2 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.sortedWith.1 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence TransformingIndexedSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; flatten(kotlin.sequences.Sequence&lt;? extends kotlin.sequences.Sequence&lt;? extends T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T last(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T minWith(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropWhileSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T minWith(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M groupByTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T minBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int sumOfByte(kotlin.sequences.Sequence&lt;java.lang.Byte&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;kotlin.Pair&lt;T,R&gt;&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TakeSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T firstOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence.iterator.1 java.util.Iterator&lt;T2&gt; getIterator2()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;kotlin.Pair&lt;T,R&gt;&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; distinctBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingIndexedSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C flatMapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence IndexingSequence(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; constrainOnce(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DistinctSequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedByDescending(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; generateSequence(kotlin.jvm.functions.Function0&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;V&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;, kotlin.jvm.functions.Function2&lt;? super T,? super R,? extends V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterNot(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeSequence TakeSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.DropWhileSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TakeSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;V&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;, kotlin.jvm.functions.Function2&lt;? super T,? super R,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterNot(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int indexOfFirst(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TakeWhileSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.GeneratorSequence.iterator.1 T next()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean all(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; emptySequence()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T lastOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T singleOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; dropWhile(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T firstOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence DropWhileSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.asIterable..inlined.Iterable.1 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.Iterable&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedWith(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double averageOfShort(kotlin.sequences.Sequence&lt;java.lang.Short&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int indexOfFirst(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T maxWith(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; requireNoNulls(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C flatMapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean all(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; distinct(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropSequence int access$getCount$p(kotlin.sequences.DropSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T singleOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T firstOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; dropWhile(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence DropWhileSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt__SequencesKt.Sequence.1 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 6'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int sumOfShort(kotlin.sequences.Sequence&lt;java.lang.Short&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt M associateTo(kotlin.sequences.Sequence&lt;? extends T&gt;, M, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.Pair&lt;? extends K,? extends V&gt;&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, T[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; flatMap(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C flatMapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt long sumOfLong(kotlin.sequences.Sequence&lt;java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingIndexedSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; distinctBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; takeWhile(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt S reduceIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function3&lt;? super java.lang.Integer,? super S,? super T,? extends S&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; constrainOnce(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C flatMapTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt A joinTo(kotlin.sequences.Sequence&lt;? extends T&gt;, A, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeSequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; asSequence(java.util.Iterator&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt S reduceIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function3&lt;? super java.lang.Integer,? super S,? super T,? extends S&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super T,? extends java.lang.CharSequence&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingIndexedSequence java.util.Iterator&lt;R&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Set&lt;T&gt; toSet(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.Pair&lt;java.util.List&lt;T&gt;,java.util.List&lt;R&gt;&gt; unzip(kotlin.sequences.Sequence&lt;? extends kotlin.Pair&lt;? extends T,? extends R&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T first(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int sumBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.minus.3 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FlatteningSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C mapIndexedNotNullTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.SortedSet&lt;T&gt; toSortedSet(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Set&lt;T&gt; toMutableSet(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt double averageOfByte(kotlin.sequences.Sequence&lt;java.lang.Byte&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filter(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sorted(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.List&lt;T&gt; toList(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T first(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterNotTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence kotlin.sequences.Sequence&lt;E&gt; flatten$kotlin_stdlib(kotlin.jvm.functions.Function1&lt;? super R,? extends java.util.Iterator&lt;? extends E&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapIndexedNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence kotlin.jvm.functions.Function2 access$getTransform$p(kotlin.sequences.MergingSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; flattenSequenceOfIterable(kotlin.sequences.Sequence&lt;? extends java.lang.Iterable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T elementAtOrElse(kotlin.sequences.Sequence&lt;? extends T&gt;, int, kotlin.jvm.functions.Function1&lt;? super java.lang.Integer,? extends T&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; plus(kotlin.sequences.Sequence&lt;? extends T&gt;, T[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.SortedSet&lt;T&gt; toSortedSet(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; dropWhile(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; distinct(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,java.util.List&lt;V&gt;&gt; groupBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int lastIndexOf(kotlin.sequences.Sequence&lt;? extends T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.SortedSet&lt;T&gt; toSortedSet(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T maxWith(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T singleOrNull(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int sumBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Integer&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt___SequencesKt.minus.1 java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean contains(kotlin.sequences.Sequence&lt;? extends T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sequenceOf(T...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C filterTo(kotlin.sequences.Sequence&lt;? extends T&gt;, C, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int indexOfLast(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, java.lang.Iterable&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;V&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;, kotlin.jvm.functions.Function2&lt;? super T,? super R,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.Pair&lt;java.util.List&lt;T&gt;,java.util.List&lt;R&gt;&gt; unzip(kotlin.sequences.Sequence&lt;? extends kotlin.Pair&lt;? extends T,? extends R&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt C toCollection(kotlin.sequences.Sequence&lt;? extends T&gt;, C)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence.iterator.1 java.lang.Object next()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.Pair&lt;java.util.List&lt;T&gt;,java.util.List&lt;T&gt;&gt; partition(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; takeWhile(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DistinctSequence DistinctSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TakeWhileSequence kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.TakeWhileSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapIndexedNotNull(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.List&lt;T&gt; toList(kotlin.sequences.Sequence&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; filterNot(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt int indexOfLast(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;V&gt; zip(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends R&gt;, kotlin.jvm.functions.Function2&lt;? super T,? super R,? extends V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DropWhileSequence kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.DropWhileSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence kotlin.sequences.Sequence access$getSequence2$p(kotlin.sequences.MergingSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.DistinctSequence DistinctSequence(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; sortedWith(kotlin.sequences.Sequence&lt;? extends T&gt;, java.util.Comparator&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; minus(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.MergingSequence kotlin.sequences.Sequence access$getSequence1$p(kotlin.sequences.MergingSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; mapIndexed(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function2&lt;? super java.lang.Integer,? super T,? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.Map&lt;K,T&gt; associateBy(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean any(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FilteringSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; flatMap(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FilteringSequence boolean access$getSendWhen$p(kotlin.sequences.FilteringSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.FlatteningSequence kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.FlatteningSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt T single(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.util.SortedSet&lt;T&gt; toSortedSet(kotlin.sequences.Sequence&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;T&gt; drop(kotlin.sequences.Sequence&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.IndexingSequence.iterator.1 java.util.Iterator&lt;T&gt; getIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.Pair&lt;java.util.List&lt;T&gt;,java.util.List&lt;T&gt;&gt; partition(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt boolean any(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.SequencesKt kotlin.sequences.Sequence&lt;R&gt; flatMap(kotlin.sequences.Sequence&lt;? extends T&gt;, kotlin.jvm.functions.Function1&lt;? super T,? extends kotlin.sequences.Sequence&lt;? extends R&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.sequences.TransformingSequence kotlin.sequences.Sequence&lt;E&gt; flatten$kotlin_stdlib(kotlin.jvm.functions.Function1&lt;? super R,? extends java.util.Iterator&lt;? extends E&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
