<root>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping java.lang.reflect.Type getJavaType(kotlin.reflect.KType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt void setAccessible(kotlin.reflect.KProperty&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt boolean getAccessible(kotlin.reflect.KProperty&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty2&lt;T,?,?&gt;&gt; getExtensionProperties(kotlin.reflect.KClass&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty1&lt;T,?&gt;&gt; getDeclaredProperties(kotlin.reflect.KClass&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.lang.Class&lt;T&gt; getJava(kotlin.reflect.KClass&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping kotlin.reflect.KFunction&lt;T&gt; getKotlinFunction(java.lang.reflect.Constructor&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty2&lt;T,?,?&gt;&gt; getExtensionProperties(kotlin.reflect.KClass&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping kotlin.reflect.KProperty&lt;?&gt; getKotlinProperty(java.lang.reflect.Field) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty1&lt;T,?&gt;&gt; getDeclaredProperties(kotlin.reflect.KClass&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt kotlin.reflect.KProperty&lt;?&gt; getKotlin(java.lang.reflect.Field) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty1&lt;T,?&gt;&gt; getProperties(kotlin.reflect.KClass&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty2&lt;T,?,?&gt;&gt; getDeclaredExtensionProperties(kotlin.reflect.KClass&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.KClassesJvm java.lang.String getJvmName(kotlin.reflect.KClass&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectLambdaKt kotlin.reflect.KFunction&lt;R&gt; reflect(kotlin.Function&lt;? extends R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping java.lang.reflect.Method getJavaGetter(kotlin.reflect.KProperty&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.KCallablesJvm void setAccessible(kotlin.reflect.KCallable&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping java.lang.reflect.Method getJavaSetter(kotlin.reflect.KMutableProperty&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping java.lang.reflect.Type getJavaType(kotlin.reflect.KType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt kotlin.reflect.KClass&lt;T&gt; getKotlin(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.ReflectJvmMapping kotlin.reflect.KFunction&lt;?&gt; getKotlinFunction(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty1&lt;T,?&gt;&gt; getProperties(kotlin.reflect.KClass&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.KCallablesJvm boolean isAccessible(kotlin.reflect.KCallable&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm._DeprecatedKt java.util.Collection&lt;kotlin.reflect.KProperty2&lt;T,?,?&gt;&gt; getDeclaredExtensionProperties(kotlin.reflect.KClass&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.KClassesJvm java.lang.String getJvmName(kotlin.reflect.KClass&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
