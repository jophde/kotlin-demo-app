<root>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void join(long, java.util.concurrent.TimeUnit) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; rightShift(groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;? extends java.lang.Object&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void scheduleCallback(java.lang.Object, groovyx.gpars.actor.impl.MessageStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void into(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void separate(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowWriteChannel&lt;?&gt;&gt;, groovy.lang.Closure&lt;java.util.List&lt;java.lang.Object&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;? extends java.lang.Object&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; or(groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;? extends java.lang.Object&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void into(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void split(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void separate(groovyx.gpars.group.PGroup, java.util.List&lt;groovyx.gpars.dataflow.DataflowWriteChannel&lt;?&gt;&gt;, groovy.lang.Closure&lt;java.util.List&lt;java.lang.Object&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void split(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowComplexExpression void subscribe(groovyx.gpars.dataflow.expression.DataflowExpression&lt;T&gt;.DataflowExpressionsCollector) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.expression.DataflowExpression&lt;V&gt; transform(java.lang.Object, groovy.lang.Closure) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void getValAsync(groovyx.gpars.actor.impl.MessageStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void choice(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;&gt;, groovy.lang.Closure&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; rightShift(groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.RemoteDataflowExpression void subscribe(groovyx.gpars.dataflow.expression.DataflowExpression&lt;T&gt;.DataflowExpressionsCollector) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void binaryChoice(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.group.PGroup, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression.BindDataflow void execute(groovyx.gpars.remote.RemoteConnection) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void split(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void whenBound(groovyx.gpars.actor.impl.MessageStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.scheduler.Pool, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovy.lang.Closure&lt;? extends java.lang.Object&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='groovyx.gpars.dataflow.expression.DataflowExpression state'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovy.lang.Closure&lt;? extends java.lang.Object&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowGetPropertyExpression void subscribe(groovyx.gpars.dataflow.expression.DataflowExpression&lt;T&gt;.DataflowExpressionsCollector) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void subscribe(groovyx.gpars.dataflow.expression.DataflowExpression&lt;T&gt;.DataflowExpressionsCollector) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowComplexExpression DataflowComplexExpression(java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;? extends java.lang.Object&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.scheduler.Pool, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.expression.DataflowExpression&lt;V&gt; transform(java.lang.Object, groovy.lang.Closure)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void choice(groovyx.gpars.group.PGroup, java.util.List&lt;groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;&gt;, groovy.lang.Closure&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void whenBound(groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowInvocationExpression DataflowInvocationExpression(java.lang.Object, java.lang.String, java.lang.Object[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; or(groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void whenBound(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void binaryChoice(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;, groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovy.lang.Closure&lt;java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression T getVal(long, java.util.concurrent.TimeUnit) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.scheduler.Pool, java.util.List&lt;groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; chainWith(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void whenBound(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovy.lang.Closure&lt;java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;java.util.List&gt; thenForkAndJoin(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;? extends java.lang.Object&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void whenBound(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void wheneverBound(groovyx.gpars.actor.impl.MessageStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowInvocationExpression void subscribe(groovyx.gpars.dataflow.expression.DataflowExpression&lt;java.lang.Object&gt;.DataflowExpressionsCollector) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void split(groovyx.gpars.group.PGroup, java.util.List&lt;groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value"
                 val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void wheneverBound(groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.Promise&lt;V&gt; then(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void getValAsync(java.lang.Object, groovyx.gpars.actor.impl.MessageStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.group.PGroup, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(groovyx.gpars.group.PGroup, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression void whenBound(groovyx.gpars.scheduler.Pool, groovy.lang.Closure&lt;V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; tap(groovyx.gpars.dataflow.DataflowWriteChannel&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;V&gt; merge(groovyx.gpars.scheduler.Pool, java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovyx.gpars.dataflow.DataflowReadChannel&lt;java.lang.Object&gt;, groovy.lang.Closure&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item
        name='groovyx.gpars.dataflow.expression.DataflowExpression groovyx.gpars.dataflow.DataflowReadChannel&lt;T&gt; filter(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, groovy.lang.Closure&lt;java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
